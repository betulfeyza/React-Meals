{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryToParsePath = tryToParsePath;\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\nvar _url = require(\"url\");\nvar _isError = _interopRequireDefault(require(\"./is-error\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * If there is an error show our error link but still show original error or\n * a formatted one if we can\n */\nfunction reportError(_ref, err) {\n  let {\n    route,\n    parsedPath\n  } = _ref;\n  let errMatches;\n  if ((0, _isError).default(err) && (errMatches = err.message.match(/at (\\d{0,})/))) {\n    const position = parseInt(errMatches[1], 10);\n    console.error(`\\nError parsing \\`${route}\\` ` + `https://nextjs.org/docs/messages/invalid-route-source\\n` + `Reason: ${err.message}\\n\\n` + `  ${parsedPath}\\n` + `  ${new Array(position).fill(\" \").join(\"\")}^\\n`);\n  } else {\n    console.error(`\\nError parsing ${route} https://nextjs.org/docs/messages/invalid-route-source`, err);\n  }\n}\nfunction tryToParsePath(route, options) {\n  const result = {\n    route,\n    parsedPath: route\n  };\n  try {\n    if (options == null ? void 0 : options.handleUrl) {\n      const parsed = (0, _url).parse(route, true);\n      result.parsedPath = `${parsed.pathname}${parsed.hash || \"\"}`;\n    }\n    result.tokens = (0, _pathToRegexp).parse(result.parsedPath);\n    result.regexStr = (0, _pathToRegexp).tokensToRegexp(result.tokens).source;\n  } catch (err) {\n    reportError(result, err);\n    result.error = err;\n  }\n  return result;\n}","map":{"version":3,"names":["tryToParsePath","_pathToRegexp","require","_url","_isError","_interopRequireDefault","reportError","_ref","err","route","parsedPath","errMatches","default","message","match","position","parseInt","console","error","Array","fill","join","options","result","handleUrl","parsed","parse","pathname","hash","tokens","regexStr","tokensToRegexp","source"],"sources":["../../src/lib/try-to-parse-path.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;QA2CgBA,cAAc,GAAdA,cAAc;AA1CQ,IAAAC,aAAmC,GAAAC,OAAA,CAAnC,mCAAmC;AACvC,IAAAC,IAAK,GAAAD,OAAA,CAAL,KAAK;AACnB,IAAAE,QAAY,GAAAC,sBAAA,CAAAH,OAAA,CAAZ,YAAY;;;;;;AAUhC;;;;AAIA,SAASI,WAAWA,CAAAC,IAAA,EAAqCC,GAAQ,EAAE;EAAA,IAA9C;IAAEC,KAAK;IAAEC;EAAU,CAAe,GAAAH,IAAA;EACrD,IAAII,UAAU;EACd,IAAI,IAAAP,QAAO,EAAKQ,OAAL,CAACJ,GAAG,CAAC,KAAKG,UAAU,GAAGH,GAAG,CAACK,OAAO,CAACC,KAAK,eAAe,CAAC,EAAE;IACnE,MAAMC,QAAQ,GAAGC,QAAQ,CAACL,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5CM,OAAO,CAACC,KAAK,CACV,qBAAoBT,KAAM,KAAI,GAC5B,yDAAwD,GACxD,WAAUD,GAAG,CAACK,OAAQ,MAAK,GAC3B,KAAIH,UAAW,IAAG,GAClB,KAAI,IAAIS,KAAK,CAACJ,QAAQ,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAE,KAAI,CACnD;GACF,MAAM;IACLJ,OAAO,CAACC,KAAK,CACV,mBAAkBT,KAAM,wDAAuD,EAChFD,GAAG,CACJ;;;AAWE,SAASR,cAAcA,CAC5BS,KAAa,EACba,OAEC,EACY;EACb,MAAMC,MAAM,GAAgB;IAAEd,KAAK;IAAEC,UAAU,EAAED;GAAO;EACxD,IAAI;IACF,IAAIa,OAAO,QAAW,GAAlB,MAAkB,GAAlBA,OAAO,CAAEE,SAAS,EAAE;MACtB,MAAMC,MAAM,GAAG,IAAAtB,IAAQ,EAAauB,KAAb,CAACjB,KAAK,EAAE,IAAI,CAAC;MACpCc,MAAM,CAACb,UAAU,GAAI,GAAEe,MAAM,CAACE,QAAU,GAAEF,MAAM,CAACG,IAAI,IAAI,EAAG,EAAC;;IAG/DL,MAAM,CAACM,MAAM,GAAG,IAAA5B,aAAK,EAAmByB,KAAnB,CAACH,MAAM,CAACb,UAAU,CAAC;IACxCa,MAAM,CAACO,QAAQ,GAAG,IAAA7B,aAAc,EAAe8B,cAAf,CAACR,MAAM,CAACM,MAAM,CAAC,CAACG,MAAM;GACvD,CAAC,OAAOxB,GAAG,EAAE;IACZF,WAAW,CAACiB,MAAM,EAAEf,GAAG,CAAC;IACxBe,MAAM,CAACL,KAAK,GAAGV,GAAG;;EAGpB,OAAOe,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}